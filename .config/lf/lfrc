#!/bin/bash
set icons
set shell bash
set shellopts '-eu'
set ifs "\n"
set hiddenfiles .*:__pycache__:*.pyc
# char mismatch in ubuntu
# set drawbox

# Vars that depend on environmental variables
# $lf -remote "send $id set previewer ${XDG_CONFIG_HOME:-$HOME/.config}/lf/scope"
# set previewer ~/.config/lf/previewr.sh
# set previewer ~/.config/lf/scope
# set cleaner ~/.config/lf/clear_img.sh

# use ctpv which is designed for lf and more native to lf
set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

# cmds/functions
cmd open ${{
    case $(file --mime-type $f -b) in
        image/vnd.djvu|application/pdf) setsid -f zathura $f >/dev/null 2>&1 ;;
        # image/vnd.djvu|application/pdf|application/octet-stream) setsid -f okular $f >/dev/null 2>&1 ;;
        text/* | application/json | application/javascript | application/pgp-encrypted | inode/x-empty) $EDITOR $f;;
        image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
        image/svg+xml) display -- $f ;;
        image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\|ico\)\(_large\)*$" | setsid -f sxiv -aio 2>/dev/null | lf-select & ;;
        # image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\|ico\)\(_large\)*$" | sxiv -aio 2>/dev/null | lf-select ;; # swallow version
        # image/*) sxiv $f ;;
        audio/*) mpv --audio-display=no $f ;;
        # video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
        video/*) mpv $f -quiet >/dev/null 2>&1 ;;  # swallow version
        # video/*) mpvs $f -quiet ;;  # swallow version
        application/octet-stream) octet-opener $f ;;
        # application/pdf|application/vnd*|application/epub*) setsid -f zathura $f >/dev/null 2>&1 ;;
        application/vnd.openxmlformats-officedocument.presentationml.presentation) setsid -f wpp $f >/dev/null 2>&1 ;;
        application/vnd.openxmlformats-officedocument.wordprocessingml.document) setsid -f wps $f >/dev/null 2>&1 ;;
        *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}

cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    if [ -d "$fx" ]; then
      tar czf $1.tar.gz ${fx##*/}
      exit 0
    fi
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    if [ -d "$fx" ]; then
      zip -r $1.zip ${fx##*/}
      exit 0
    fi
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# cmd paste &{{
#     set -- $(cat ~/.local/share/lf/files)
#     mode="$1"
#     shift
#     case "$mode" in
#         copy)
#             rsync -av --ignore-existing --progress -- "$@" . |
#             stdbuf -i0 -o0 -e0 tr '\r' '\n' |
#             while IFS= read -r line; do
#                 lf -remote "send $id echo $line"
#             done
#             ;;
#         move) mv -n -- "$@" .;;
#     esac
#     rm ~/.local/share/lf/files
#     lf -remote "send clear"
# }}

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

# yank
cmd yank-dirname $dirname -- "$f" | head -c-1 | xsel -i -b
cmd yank-path $printf '%s' "$fx" | xsel -i -b
cmd yank-basename $basename -a -- $fx | head -c-1 | xsel -i -b

cmd yank-basename-without-extension ${{
    echo "$fx" |
      xargs -r -d '\n' basename -a |
      awk -e '{
        for (i=length($0); i > 0; i--) {
          if (substr($0, i, 1) == ".") {
            if (i == 1) print $0
            else print substr($0, 0, i-1)

            break
          }
        }

        if (i == 0)
          print $0
      }' |
      if [ -n "$fs" ]; then cat; else tr -d '\n'; fi |
      xsel -i -b
}}

cmd show-media-size %exiftool "$f" | sed -n '/Image Size/p'
cmd show-file-size %du --max-depth=0 -h "$f"
cmd show-images %sxiv -rto $fx
cmd show-file-numbers %ls $f | wc -l

# y (select for copy) and P to paste soft-link
# d (select for cut) and P to paste hard-link
cmd link %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    case "$mode" in
        # symbolically copy mode is indicating a soft link
        copy) ln -sr -t . -- "$@";;
        # while a move mode is indicating a hard link
        move) ln -t . -- "$@";;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

# bulk-rename
cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    [ -z "$fs" ] && fs="$(ls)"
    # use filename instead of full-path
    filenames=""
    for i in $fs;
      do filenames+="${i##*/}$IFS"
    done
    # remove the last $IFS
    filenames=${filenames%$IFS}

    printf '%s\n' "$filenames" >"$old"
    printf '%s\n' "$filenames" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

cmd fzf_file ${{
    file=$(fd --type=file -H -E ".git/*" | fzf --bind=ctrl-z:ignore)
    [ ! -e "$file" ] && exit
    lf -remote "send $id select $file"
  }}


# Keybindings
map i up
map k down
map j updir
map l open

# faster move
# map I push 5i
# map K push 5k

# go dir
map D delete
# map gpw cd /d/projects/workCode
# map gpy cd /d/projects/research/yolov5
# map gpm cd /d/projects/my_codebase
# map gpd cd /d/projects/data_tools
# map gps cd /d/projects/StudyCode

map gpp cd /d/codes
map gpc cd ~/codes
map grb cd ~/reading/books
map grp cd ~/reading/papers

map gD cd ~/Desktop
map gd cd ~/Downloads
map gv cd ~/Videos
map gs cd ~/Screenshots

map gfe cd /e
map gfd cd /d
map gfa cd ~/.config/alacritty
map gff cd ~/.config
map gfr cd ~/.config/ranger
map gfb cd ~/.config/bin
map gfn cd ~/.config/nvim
map gfz cd ~/.config/zsh
map gft cd ~/.config/tmux
map gfg cd ~/.config/lazygit
map gfl cd ~/.config/lf


# system
map S $ $SHELL
map M push :mkdir<space>
map x $$f
map <backspace2> set hidden!
map <esc> clear

# compress and extract
# map e extract
map e $ext $f
map t push :tar<space>
map Z push :zip<space>

# autojump
cmd aj %lf -remote "send $id cd '$(autojump $1)'"
map J push :aj<space>

# fzf
# cmd fzf $nvim $(find . -name "$1" | fzf)
# map <c-f> push :fzf<space>
map <c-f> fzf_file

# rename
map a rename  # before extention
map A push a<c-e> # at the end
map h push a<c-a> # at the beginning
map c push a<c-u>
map C push a<c-e><c-u>

# set bg
map B $setbg $f

# yank
map y
map yy copy
map yp yank-path
map yd yank-dirname
map yn yank-basename
map y. yank-basename-without-extension

# open with
cmd open-with $"$@" $fx
map r push :open-with<space>

# warning
%[ $LF_LEVEL -eq 1 ] || echo "Warning: You're in a nested lf instance!"

# new file
map V push :$nvim<space>
map T push :$touch<space>

# mark
map m
map ms mark-save
map mm mark-load
map mr mark-remove

# lazygit
map <c-g> $lazygit

# show media and file size
map sw show-media-size
map sd show-file-size
map sn show-file-numbers
map w show-images

# link
map P :link

# bulk-rename
map b bulk-rename

# quit
map Q quit

map <backspace> ${{
	clear
	cmd=$(
		lf -remote "query $id history" |
		awk -F'\t' 'NR > 1 { print $NF}' |
		sort -u |
		fzf --reverse --prompt='Execute command: '
	)
	lf -remote "send $id $cmd"
}}
