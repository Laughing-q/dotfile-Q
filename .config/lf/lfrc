#
set icons
set shell bash
set shellopts '-eu'
set ifs "\n"
set hiddenfiles .*:__pycache__:*.pyc
# char mismatch in ubuntu
# set drawbox

# Vars that depend on environmental variables
# $lf -remote "send $id set previewer ${XDG_CONFIG_HOME:-$HOME/.config}/lf/scope"
# set previewer ~/.config/lf/previewr.sh
set previewer ~/.config/lf/scope
set cleaner ~/.config/lf/clear_img.sh

# cmds/functions
cmd open ${{
    case $(file --mime-type $f -b) in
        image/vnd.djvu|application/pdf|application/octet-stream) setsid -f zathura $fx >/dev/null 2>&1 ;;
        # image/vnd.djvu|application/pdf|application/octet-stream) setsid -f okular $fx >/dev/null 2>&1 ;;
        text/*) $EDITOR $fx;;
        image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
        image/svg+xml) display -- $f ;;
        image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\|ico\)\(_large\)*$" | setsid -f sxiv -aio 2>/dev/null | lf-select & ;;
        # image/*) sxiv $f ;;
        audio/*) mpv --audio-display=no $f ;;
        video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
        application/pdf|application/vnd*|application/epub*) setsid -f okular $fx >/dev/null 2>&1 ;;
        application/pgp-encrypted) $EDITOR $fx ;;
        *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}

cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# cmd paste &{{
#     set -- $(cat ~/.local/share/lf/files)
#     mode="$1"
#     shift
#     case "$mode" in
#         copy)
#             rsync -av --ignore-existing --progress -- "$@" . |
#             stdbuf -i0 -o0 -e0 tr '\r' '\n' |
#             while IFS= read -r line; do
#                 lf -remote "send $id echo $line"
#             done
#             ;;
#         move) mv -n -- "$@" .;;
#     esac
#     rm ~/.local/share/lf/files
#     lf -remote "send clear"
# }}

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

# yank
cmd yank-dirname $dirname -- "$f" | head -c-1 | xclip -i -selection clipboard
cmd yank-path $printf '%s' "$fx" | xclip -i -selection clipboard
cmd yank-basename $basename -a -- $fx | head -c-1 | xclip -i -selection clipboard

cmd yank-basename-without-extension ${{
    echo "$fx" |
      xargs -r -d '\n' basename -a |
      awk -e '{
        for (i=length($0); i > 0; i--) {
          if (substr($0, i, 1) == ".") {
            if (i == 1) print $0
            else print substr($0, 0, i-1)

            break
          }
        }

        if (i == 0)
          print $0
      }' |
      if [ -n "$fs" ]; then cat; else tr -d '\n'; fi |
      xclip -i -selection clipboard
}}

cmd show-media-size %exiftool "$fx" | sed -n '/Image Size/p'

# y (select for copy) and P to paste soft-link
# d (select for cut) and P to paste hard-link
cmd link %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    case "$mode" in
        # symbolically copy mode is indicating a soft link
        copy) ln -sr -t . -- "$@";;
        # while a move mode is indicating a hard link
        move) ln -t . -- "$@";;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

# bulk-rename
cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    [ -n "$fs" ] && fs="$(ls)"
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}


# Keybindings
map i up
map k down
map j updir
map l open

# faster move
map I push 5i
map K push 5k

# go dir
map D delete
map gpw cd /d/projects/workCode
map gpy cd /d/projects/research/yolov5
map gpp cd /d/projects
map gpm cd /d/projects/my_codebase
map gpd cd /d/projects/data_tools
map gps cd /d/projects/StudyCode
map gD cd ~/Desktop
map gd cd ~/下载
map gfe cd /e
map gfd cd /d
map gfa cd ~/.config/alacritty
map gff cd ~/.config
map gfr cd ~/.config/ranger
map gfb cd ~/.config/bin
map gfn cd ~/.config/nvim
map gfm cd ~/.config/mutt
map gfz cd ~/.config/zsh
map gft cd ~/.config/tmux
map gfl cd ~/.config/lazygit/


# search
map = search-next
map - search-prev
map = find-next
map - find-prev

# system
map S $ $SHELL
map M push :mkdir<space>
map x $$f
map <backspace2> set hidden!
map <esc> clear
map w

# compress and extract
# map e extract
map e $ext $f
map t push :tar<space>
map Z push :zip<space>

# autojump
cmd aj %lf -remote "send $id cd '$(autojump $1)'"
map J push :aj<space>

# fzf
cmd fzf $nvim $(find . -name "$1" | fzf)
map <c-f> push :fzf<space>

# rename
map A rename  # at the very end
map a push A<a-b><a-b><a-f> # before extention
map h push A<c-a>
map c push A<c-u>

# set bg
map b $setbg $f

# yank
map y
map yy copy
map yp yank-path
map yd yank-dirname
map yn yank-basename
map y. yank-basename-without-extension

# open with
cmd open-with $"$@" $fx
map r push :open-with<space>

# warning
%[ $LF_LEVEL -eq 1 ] || echo "Warning: You're in a nested lf instance!"

# new file
map V push :$nvim<space>
map T push :$touch<space>

# mark
map m
map mm mark-save
map ml mark-load
map mr mark-remove

# lazygit
map <c-g> $lazygit

# show media size
map w show-media-size

# link
map P :link

# bulk-rename
map B bulk-rename

# quit
map Q quit
